void quickSort(List<int> arr, int left, int right) {
  if (left < right) {
    int pivotIndex = partition(arr, left, right);

    quickSort(arr, left, pivotIndex - 1);
    quickSort(arr, pivotIndex + 1, right);
  }
}

int partition(List<int> arr, int left, int right) {
  int pivot = arr[right];
  int i = left - 1;

  for (int j = left; j < right; j++) {
    if (arr[j] < pivot) {
      i++;
      swap(arr, i, j);
    }
  }

  swap(arr, i + 1, right);

  return i + 1;
}

void swap(List<int> arr, int i, int j) {
  int temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
}

void main() {
  List<int> arr = [5, 2, 9, 3, 6];
  quickSort(arr, 0, arr.length - 1);

  print(arr); // Output: [2, 3, 5, 6, 9]
}

/
This implementation uses the Lomuto partition scheme to divide the input array into two subarrays.
The quickSort function takes the input array and its left and right indices as input and sorts it in ascending order. 
The partition function takes the input array and its left and right indices as input and returns the index of the pivot element.
The swap function swaps two elements in the input array. 
The main function initializes an input array and sorts it using the quickSort function.

/
